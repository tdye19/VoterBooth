package VoterBooth;

import java.util.Random;
/**
 * @author Roger Ferguson
 */
public class VoterProducer implements ClockListener {

	private int nextPerson = 0;
	private int numOfTicksNextPerson;
	private int averageBoothTime;
	private int averageCheckInTime;
	private int averageLeaveTime;
	private int averageVotingTime;
	private Table tablemz, tableal;
	private Random r = new Random();
	private Booth booth;
	


	public VoterProducer( Table tableal, Table tablemz,
			int numOfTicksNextPerson, int averageBoothTime,
			int averageCheckInTime, int averageLeaveTime, 
			int averageVotingTime){
		
		
		this.tableal = tableal;
		this.tablemz = tablemz;
		this.numOfTicksNextPerson = numOfTicksNextPerson;
		this.averageBoothTime = averageBoothTime;
		this.averageVotingTime = averageVotingTime;
		this.averageCheckInTime =averageCheckInTime;
		
		//r.setSeed(13);    // This will cause the same random numbers
	}



	public void event(int tick) {
		if (nextPerson <= tick) {
			nextPerson = tick + numOfTicksNextPerson;
			
			Voter person;
			
			int rNumber = (int)(Math.random() * 100);
			
			person = new RegularVoter();
			person.setCheckInTime(10);
			person.setBoothTime(10);
			person.setLeaveTime(10);
			//if (person   )
			
			if(rNumber < 50){
				tableal.add(person);
				
			}
			else {
				tablemz.add(person);
			}

			person.setVotingBoothTime((int) (averageBoothTime*0.5*r.nextGaussian() + averageBoothTime +.5));
			person.setTickTime(tick);
			

			//person.setDestination(theLocationAfterTheBooth);  // You can save off where the voter should go.
		}
	}
	// ArrayList <voter> finalList = new ArrayList<Voter>;
	// for(int i = 0; i < Q.length(); i++){
	//		if(i < normal){
	//		finalList.add(person);
	//		}
	//	else if(i < normal+special){
	//		finalList.add(special_voter)	
	//	}	
	//}


}
